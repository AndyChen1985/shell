//
// Created by czb on 20-7-19.
//

#ifndef DEMO1_OBJECTFACTORY_H
#define DEMO1_OBJECTFACTORY_H



#include <QByteArray>
#include <QMetaObject>
#include <QHash>


class ControllerFactory
{
public:
    template<typename T>
    static void registerController()
    {
        QString className{T::staticMetaObject.className()};
        constructors().insert(className.replace("_Controller",""), &constructorHelper<T>);
    }

    static QObject* createController( const QString& className)
    {
        Constructor constructor = constructors().value( className );
        if ( constructor == NULL )
            return NULL;
        return (*constructor)(className);
    }


    static void callControllerAction(QString controllerName, const char* actionName){
        QObject* object = ControllerFactory::createController( controllerName );



//        testController->print();
        QString result;
        QMetaObject::invokeMethod(object, "print");
    }

private:
    typedef QObject* (*Constructor)(QString);



    template<typename T>
    static QObject* constructorHelper(QString controllerName)
    {
        static QHash<QString, QObject*> name_controller_hash;
        auto controller =name_controller_hash.value(controllerName);
        if(controller != NULL){
            return  controller;
        } else{
            cout << "entry this branch" << endl;
            controller = new T();
            name_controller_hash.insert(controllerName, controller);
            return  controller;
        }
    }

    static QHash<QString, Constructor>& constructors()
    {
        static QHash<QString, Constructor> instance;
        return instance;
    }
};


#endif //DEMO1_OBJECTFACTORY_H

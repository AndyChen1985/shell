//
// Created by czb on 20-7-19.
//

#ifndef DEMO1_OBJECTFACTORY_H
#define DEMO1_OBJECTFACTORY_H



#include <QByteArray>
#include <QMetaObject>
#include <QHash>


class ObjectFactory
{
public:
    template<typename T>
    static void registerClass()
    {
        constructors().insert( T::staticMetaObject.className(), &constructorHelper<T> );
    }

    static QObject* createObject( const QString& className)
    {
        Constructor constructor = constructors().value( className );
        if ( constructor == NULL )
            return NULL;
        return (*constructor)();
    }


private:
    typedef QObject* (*Constructor)();

    template<typename T>
    static QObject* constructorHelper()
    {
        return new T();
    }

    static QHash<QString, Constructor>& constructors()
    {
        static QHash<QString, Constructor> instance;
        return instance;
    }
};


#endif //DEMO1_OBJECTFACTORY_H
